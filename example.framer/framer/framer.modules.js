require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"flipCard":[function(require,module,exports){
exports.flipEffect = function(front, back, perspective, flipCurve) {
  var container, perspectiveLayer;
  perspectiveLayer = new Layer({
    width: front.width + 100,
    height: front.height + 100,
    backgroundColor: "transparent"
  });
  perspectiveLayer.perspective = perspective;
  perspectiveLayer.center();
  container = new Layer({
    width: front.width,
    height: front.height,
    backgroundColor: "transparent",
    superLayer: perspectiveLayer
  });
  container.center();
  back.superLayer = container;
  front.superLayer = container;
  back.rotationY = 180;
  front.states.add({
    front: {
      opacity: 1
    },
    back: {
      opacity: 0
    }
  });
  front.states.animationOptions = {
    curve: flipCurve
  };
  front.states.switchInstant("front");
  back.states.add({
    front: {
      opacity: 0
    },
    back: {
      opacity: 1
    }
  });
  back.states.animationOptions = {
    curve: flipCurve
  };
  container.states.add({
    front: {
      rotationY: 0
    },
    back: {
      rotationY: 180
    }
  });
  container.states.animationOptions = {
    curve: flipCurve
  };
  container.states.switchInstant("front");
  return container.on(Events.Click, function() {
    this.states.next(["back", "front"]);
    return front.states.next(["back", "front"]);
  });
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvamFja3lsZWUvRGVza3RvcC9mcmFtZXItZmxpcC1jYXJkLW1vZHVsZS9leGFtcGxlLmZyYW1lci9tb2R1bGVzL2ZsaXBDYXJkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUMsS0FBRCxFQUFRLElBQVIsRUFBYyxXQUFkLEVBQTJCLFNBQTNCLEdBQUE7QUFFakIsTUFBQSwyQkFBQTtBQUFBLEVBQUEsZ0JBQUEsR0FBdUIsSUFBQSxLQUFBLENBQ25CO0FBQUEsSUFBQSxLQUFBLEVBQU8sS0FBSyxDQUFDLEtBQU4sR0FBYyxHQUFyQjtBQUFBLElBQ0EsTUFBQSxFQUFRLEtBQUssQ0FBQyxNQUFOLEdBQWUsR0FEdkI7QUFBQSxJQUVBLGVBQUEsRUFBaUIsYUFGakI7R0FEbUIsQ0FBdkIsQ0FBQTtBQUFBLEVBSUEsZ0JBQWdCLENBQUMsV0FBakIsR0FBK0IsV0FKL0IsQ0FBQTtBQUFBLEVBS0EsZ0JBQWdCLENBQUMsTUFBakIsQ0FBQSxDQUxBLENBQUE7QUFBQSxFQU9BLFNBQUEsR0FBZ0IsSUFBQSxLQUFBLENBQ1o7QUFBQSxJQUFBLEtBQUEsRUFBTyxLQUFLLENBQUMsS0FBYjtBQUFBLElBQ0EsTUFBQSxFQUFRLEtBQUssQ0FBQyxNQURkO0FBQUEsSUFFQSxlQUFBLEVBQWlCLGFBRmpCO0FBQUEsSUFHQSxVQUFBLEVBQVksZ0JBSFo7R0FEWSxDQVBoQixDQUFBO0FBQUEsRUFjQSxTQUFTLENBQUMsTUFBVixDQUFBLENBZEEsQ0FBQTtBQUFBLEVBaUJBLElBQUksQ0FBQyxVQUFMLEdBQWtCLFNBakJsQixDQUFBO0FBQUEsRUFrQkEsS0FBSyxDQUFDLFVBQU4sR0FBbUIsU0FsQm5CLENBQUE7QUFBQSxFQXFCQSxJQUFJLENBQUMsU0FBTCxHQUFpQixHQXJCakIsQ0FBQTtBQUFBLEVBMEJBLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBYixDQUNJO0FBQUEsSUFBQSxLQUFBLEVBQU87QUFBQSxNQUFDLE9BQUEsRUFBUyxDQUFWO0tBQVA7QUFBQSxJQUNBLElBQUEsRUFBTTtBQUFBLE1BQUMsT0FBQSxFQUFTLENBQVY7S0FETjtHQURKLENBMUJBLENBQUE7QUFBQSxFQTZCQSxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFiLEdBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTyxTQUFQO0dBOUJKLENBQUE7QUFBQSxFQStCQSxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWIsQ0FBMkIsT0FBM0IsQ0EvQkEsQ0FBQTtBQUFBLEVBaUNBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUNJO0FBQUEsSUFBQSxLQUFBLEVBQU87QUFBQSxNQUFDLE9BQUEsRUFBUyxDQUFWO0tBQVA7QUFBQSxJQUNBLElBQUEsRUFBTTtBQUFBLE1BQUMsT0FBQSxFQUFTLENBQVY7S0FETjtHQURKLENBakNBLENBQUE7QUFBQSxFQW9DQSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFaLEdBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTyxTQUFQO0dBckNKLENBQUE7QUFBQSxFQXVDQSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQWpCLENBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTztBQUFBLE1BQUMsU0FBQSxFQUFXLENBQVo7S0FBUDtBQUFBLElBQ0EsSUFBQSxFQUFNO0FBQUEsTUFBQyxTQUFBLEVBQVcsR0FBWjtLQUROO0dBREosQ0F2Q0EsQ0FBQTtBQUFBLEVBMENBLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWpCLEdBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTyxTQUFQO0dBM0NKLENBQUE7QUFBQSxFQTRDQSxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWpCLENBQStCLE9BQS9CLENBNUNBLENBQUE7U0E2Q0EsU0FBUyxDQUFDLEVBQVYsQ0FBYSxNQUFNLENBQUMsS0FBcEIsRUFBMkIsU0FBQSxHQUFBO0FBQ3ZCLElBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFaLENBQWlCLENBQUMsTUFBRCxFQUFRLE9BQVIsQ0FBakIsQ0FBQSxDQUFBO1dBQ0EsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFiLENBQWtCLENBQUMsTUFBRCxFQUFRLE9BQVIsQ0FBbEIsRUFGdUI7RUFBQSxDQUEzQixFQS9DaUI7QUFBQSxDQUFyQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydHMuZmxpcEVmZmVjdCA9IChmcm9udCwgYmFjaywgcGVyc3BlY3RpdmUsIGZsaXBDdXJ2ZSkgLT5cbiAgICAjIENyZWF0ZSBhIG5ldyBjb250YWluZXIgbGF5ZXJcbiAgICBwZXJzcGVjdGl2ZUxheWVyID0gbmV3IExheWVyXG4gICAgICAgIHdpZHRoOiBmcm9udC53aWR0aCArIDEwMFxuICAgICAgICBoZWlnaHQ6IGZyb250LmhlaWdodCArIDEwMFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIlxuICAgIHBlcnNwZWN0aXZlTGF5ZXIucGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZVxuICAgIHBlcnNwZWN0aXZlTGF5ZXIuY2VudGVyKClcbiAgICBcbiAgICBjb250YWluZXIgPSBuZXcgTGF5ZXJcbiAgICAgICAgd2lkdGg6IGZyb250LndpZHRoXG4gICAgICAgIGhlaWdodDogZnJvbnQuaGVpZ2h0XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gICAgICAgIHN1cGVyTGF5ZXI6IHBlcnNwZWN0aXZlTGF5ZXJcblxuICAgICMgQ2VudGVyIHRoZSBjb250YWluZXJcbiAgICBjb250YWluZXIuY2VudGVyKClcbiAgICBcbiAgICAjU2V0IHN1cGVyTGF5ZXIgZm9yIGJvdGggZnJvbnQgYW5kIGJhY2sgbGF5ZXJzXG4gICAgYmFjay5zdXBlckxheWVyID0gY29udGFpbmVyXG4gICAgZnJvbnQuc3VwZXJMYXllciA9IGNvbnRhaW5lclxuICAgIFxuICAgICMgUm90YXRlIHRoZSBiYWNrIGltYWdlIG9uIGludGlhbFxuICAgIGJhY2sucm90YXRpb25ZID0gMTgwXG4gICAgXG4gICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgICAjIFN0YXRlc1xuICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gICAgZnJvbnQuc3RhdGVzLmFkZFxuICAgICAgICBmcm9udDoge29wYWNpdHk6IDF9XG4gICAgICAgIGJhY2s6IHtvcGFjaXR5OiAwfVxuICAgIGZyb250LnN0YXRlcy5hbmltYXRpb25PcHRpb25zID1cbiAgICAgICAgY3VydmU6IGZsaXBDdXJ2ZVxuICAgIGZyb250LnN0YXRlcy5zd2l0Y2hJbnN0YW50KFwiZnJvbnRcIilcbiAgICBcbiAgICBiYWNrLnN0YXRlcy5hZGRcbiAgICAgICAgZnJvbnQ6IHtvcGFjaXR5OiAwfVxuICAgICAgICBiYWNrOiB7b3BhY2l0eTogMX1cbiAgICBiYWNrLnN0YXRlcy5hbmltYXRpb25PcHRpb25zID1cbiAgICAgICAgY3VydmU6IGZsaXBDdXJ2ZVxuICAgIFxuICAgIGNvbnRhaW5lci5zdGF0ZXMuYWRkXG4gICAgICAgIGZyb250OiB7cm90YXRpb25ZOiAwfVxuICAgICAgICBiYWNrOiB7cm90YXRpb25ZOiAxODB9XG4gICAgY29udGFpbmVyLnN0YXRlcy5hbmltYXRpb25PcHRpb25zID1cbiAgICAgICAgY3VydmU6IGZsaXBDdXJ2ZVxuICAgIGNvbnRhaW5lci5zdGF0ZXMuc3dpdGNoSW5zdGFudChcImZyb250XCIpXG4gICAgY29udGFpbmVyLm9uIEV2ZW50cy5DbGljaywgLT5cbiAgICAgICAgdGhpcy5zdGF0ZXMubmV4dChbXCJiYWNrXCIsXCJmcm9udFwiXSlcbiAgICAgICAgZnJvbnQuc3RhdGVzLm5leHQoW1wiYmFja1wiLFwiZnJvbnRcIl0pIl19
