require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"flipCard":[function(require,module,exports){
exports.flipEffect = function(front, back, perspective) {
  var container, perspectiveLayer;
  perspectiveLayer = new Layer({
    width: front.width + 100,
    height: front.height + 100,
    backgroundColor: "transparent"
  });
  perspectiveLayer.perspective = perspective;
  perspectiveLayer.center();
  container = new Layer({
    width: front.width,
    height: front.height,
    backgroundColor: "transparent",
    superLayer: perspectiveLayer
  });
  container.center();
  back.superLayer = container;
  front.superLayer = container;
  back.rotationY = 180;
  front.states.add({
    front: {
      opacity: 1
    },
    back: {
      opacity: 0
    }
  });
  front.states.animationOptions = {
    curve: "spring(300,20,0)"
  };
  front.states.switchInstant("front");
  back.states.add({
    front: {
      opacity: 0
    },
    back: {
      opacity: 1
    }
  });
  back.states.animationOptions = {
    curve: "spring(300,20,0)"
  };
  container.states.add({
    front: {
      rotationY: 0
    },
    back: {
      rotationY: 180
    }
  });
  container.states.animationOptions = {
    curve: "spring(300,20,0)"
  };
  container.states.switchInstant("front");
  return container.on(Events.Click, function() {
    this.states.next(["back", "front"]);
    return front.states.next(["back", "front"]);
  });
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvamFja3lsZWUvRHJvcGJveCAoVmVuZCkvRGVzaWduL1Byb2R1Y3QvV2ViIEFwcC8wMl9OZXdfVmVuZC8wM19XZWdpc3Rlci8wMV9BcHAvcHJvdG90eXBlcy9mbGlwQ2FyZC5mcmFtZXIvbW9kdWxlcy9mbGlwQ2FyZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxPQUFPLENBQUMsVUFBUixHQUFxQixTQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsV0FBZCxHQUFBO0FBRWpCLE1BQUEsMkJBQUE7QUFBQSxFQUFBLGdCQUFBLEdBQXVCLElBQUEsS0FBQSxDQUNuQjtBQUFBLElBQUEsS0FBQSxFQUFPLEtBQUssQ0FBQyxLQUFOLEdBQWMsR0FBckI7QUFBQSxJQUNBLE1BQUEsRUFBUSxLQUFLLENBQUMsTUFBTixHQUFlLEdBRHZCO0FBQUEsSUFFQSxlQUFBLEVBQWlCLGFBRmpCO0dBRG1CLENBQXZCLENBQUE7QUFBQSxFQUlBLGdCQUFnQixDQUFDLFdBQWpCLEdBQStCLFdBSi9CLENBQUE7QUFBQSxFQUtBLGdCQUFnQixDQUFDLE1BQWpCLENBQUEsQ0FMQSxDQUFBO0FBQUEsRUFPQSxTQUFBLEdBQWdCLElBQUEsS0FBQSxDQUNaO0FBQUEsSUFBQSxLQUFBLEVBQU8sS0FBSyxDQUFDLEtBQWI7QUFBQSxJQUNBLE1BQUEsRUFBUSxLQUFLLENBQUMsTUFEZDtBQUFBLElBRUEsZUFBQSxFQUFpQixhQUZqQjtBQUFBLElBR0EsVUFBQSxFQUFZLGdCQUhaO0dBRFksQ0FQaEIsQ0FBQTtBQUFBLEVBY0EsU0FBUyxDQUFDLE1BQVYsQ0FBQSxDQWRBLENBQUE7QUFBQSxFQWlCQSxJQUFJLENBQUMsVUFBTCxHQUFrQixTQWpCbEIsQ0FBQTtBQUFBLEVBa0JBLEtBQUssQ0FBQyxVQUFOLEdBQW1CLFNBbEJuQixDQUFBO0FBQUEsRUFxQkEsSUFBSSxDQUFDLFNBQUwsR0FBaUIsR0FyQmpCLENBQUE7QUFBQSxFQTBCQSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQWIsQ0FDSTtBQUFBLElBQUEsS0FBQSxFQUFPO0FBQUEsTUFBQyxPQUFBLEVBQVMsQ0FBVjtLQUFQO0FBQUEsSUFDQSxJQUFBLEVBQU07QUFBQSxNQUFDLE9BQUEsRUFBUyxDQUFWO0tBRE47R0FESixDQTFCQSxDQUFBO0FBQUEsRUE2QkEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxnQkFBYixHQUNJO0FBQUEsSUFBQSxLQUFBLEVBQU8sa0JBQVA7R0E5QkosQ0FBQTtBQUFBLEVBK0JBLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYixDQUEyQixPQUEzQixDQS9CQSxDQUFBO0FBQUEsRUFpQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTztBQUFBLE1BQUMsT0FBQSxFQUFTLENBQVY7S0FBUDtBQUFBLElBQ0EsSUFBQSxFQUFNO0FBQUEsTUFBQyxPQUFBLEVBQVMsQ0FBVjtLQUROO0dBREosQ0FqQ0EsQ0FBQTtBQUFBLEVBb0NBLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQVosR0FDSTtBQUFBLElBQUEsS0FBQSxFQUFPLGtCQUFQO0dBckNKLENBQUE7QUFBQSxFQXVDQSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQWpCLENBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTztBQUFBLE1BQUMsU0FBQSxFQUFXLENBQVo7S0FBUDtBQUFBLElBQ0EsSUFBQSxFQUFNO0FBQUEsTUFBQyxTQUFBLEVBQVcsR0FBWjtLQUROO0dBREosQ0F2Q0EsQ0FBQTtBQUFBLEVBMENBLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWpCLEdBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTyxrQkFBUDtHQTNDSixDQUFBO0FBQUEsRUE0Q0EsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFqQixDQUErQixPQUEvQixDQTVDQSxDQUFBO1NBNkNBLFNBQVMsQ0FBQyxFQUFWLENBQWEsTUFBTSxDQUFDLEtBQXBCLEVBQTJCLFNBQUEsR0FBQTtBQUN2QixJQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBWixDQUFpQixDQUFDLE1BQUQsRUFBUSxPQUFSLENBQWpCLENBQUEsQ0FBQTtXQUNBLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBYixDQUFrQixDQUFDLE1BQUQsRUFBUSxPQUFSLENBQWxCLEVBRnVCO0VBQUEsQ0FBM0IsRUEvQ2lCO0FBQUEsQ0FBckIsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnRzLmZsaXBFZmZlY3QgPSAoZnJvbnQsIGJhY2ssIHBlcnNwZWN0aXZlKSAtPlxuICAgICMgQ3JlYXRlIGEgbmV3IGNvbnRhaW5lciBsYXllclxuICAgIHBlcnNwZWN0aXZlTGF5ZXIgPSBuZXcgTGF5ZXJcbiAgICAgICAgd2lkdGg6IGZyb250LndpZHRoICsgMTAwXG4gICAgICAgIGhlaWdodDogZnJvbnQuaGVpZ2h0ICsgMTAwXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gICAgcGVyc3BlY3RpdmVMYXllci5wZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlXG4gICAgcGVyc3BlY3RpdmVMYXllci5jZW50ZXIoKVxuICAgIFxuICAgIGNvbnRhaW5lciA9IG5ldyBMYXllclxuICAgICAgICB3aWR0aDogZnJvbnQud2lkdGhcbiAgICAgICAgaGVpZ2h0OiBmcm9udC5oZWlnaHRcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcbiAgICAgICAgc3VwZXJMYXllcjogcGVyc3BlY3RpdmVMYXllclxuXG4gICAgIyBDZW50ZXIgdGhlIGNvbnRhaW5lclxuICAgIGNvbnRhaW5lci5jZW50ZXIoKVxuICAgIFxuICAgICNTZXQgc3VwZXJMYXllciBmb3IgYm90aCBmcm9udCBhbmQgYmFjayBsYXllcnNcbiAgICBiYWNrLnN1cGVyTGF5ZXIgPSBjb250YWluZXJcbiAgICBmcm9udC5zdXBlckxheWVyID0gY29udGFpbmVyXG4gICAgXG4gICAgIyBSb3RhdGUgdGhlIGJhY2sgaW1hZ2Ugb24gaW50aWFsXG4gICAgYmFjay5yb3RhdGlvblkgPSAxODBcbiAgICBcbiAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICAgICMgU3RhdGVzXG4gICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgICBmcm9udC5zdGF0ZXMuYWRkXG4gICAgICAgIGZyb250OiB7b3BhY2l0eTogMX1cbiAgICAgICAgYmFjazoge29wYWNpdHk6IDB9XG4gICAgZnJvbnQuc3RhdGVzLmFuaW1hdGlvbk9wdGlvbnMgPVxuICAgICAgICBjdXJ2ZTogXCJzcHJpbmcoMzAwLDIwLDApXCJcbiAgICBmcm9udC5zdGF0ZXMuc3dpdGNoSW5zdGFudChcImZyb250XCIpXG4gICAgXG4gICAgYmFjay5zdGF0ZXMuYWRkXG4gICAgICAgIGZyb250OiB7b3BhY2l0eTogMH1cbiAgICAgICAgYmFjazoge29wYWNpdHk6IDF9XG4gICAgYmFjay5zdGF0ZXMuYW5pbWF0aW9uT3B0aW9ucyA9XG4gICAgICAgIGN1cnZlOiBcInNwcmluZygzMDAsMjAsMClcIlxuICAgIFxuICAgIGNvbnRhaW5lci5zdGF0ZXMuYWRkXG4gICAgICAgIGZyb250OiB7cm90YXRpb25ZOiAwfVxuICAgICAgICBiYWNrOiB7cm90YXRpb25ZOiAxODB9XG4gICAgY29udGFpbmVyLnN0YXRlcy5hbmltYXRpb25PcHRpb25zID1cbiAgICAgICAgY3VydmU6IFwic3ByaW5nKDMwMCwyMCwwKVwiXG4gICAgY29udGFpbmVyLnN0YXRlcy5zd2l0Y2hJbnN0YW50KFwiZnJvbnRcIilcbiAgICBjb250YWluZXIub24gRXZlbnRzLkNsaWNrLCAtPlxuICAgICAgICB0aGlzLnN0YXRlcy5uZXh0KFtcImJhY2tcIixcImZyb250XCJdKVxuICAgICAgICBmcm9udC5zdGF0ZXMubmV4dChbXCJiYWNrXCIsXCJmcm9udFwiXSkiXX0=
